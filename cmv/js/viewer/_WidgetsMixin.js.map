{"version":3,"sources":["_WidgetsMixin.js"],"names":["define","declare","array","lang","put","Menu","ContentPane","FloatingTitlePane","FloatingWidgetDialog","legendLayerInfos","editorLayerInfos","identifyLayerInfos","layerControlLayerInfos","widgets","widgetTypes","createWidgets","getPaneWidgets","pane","paneWidgets","filter","paneWidget","placeAt","this","key","config","hasOwnProperty","widget","clone","widgetKey","id","include","indexOf","type","position","push","panes","sort","a","b","length","forEach","i","widgetLoader","widgetConfig","parentId","pnl","concat","handleError","source","error","title","_createTitlePaneWidget","_createContentPaneWidget","_createFloatingWidget","parentWidget","_showWidgetLoader","require","options","path","hitch","createWidget","WidgetClass","_setWidgetOptions","containerNode","srcNodeRef","startup","_started","_hideWidgetLoader","map","mapRightClickMenu","targetNodeIds","root","selector","mapClickMode","current","layerInfos","loadingNode","parentNode","tp","mixin","open","canFloat","resizable","paneOptions","left","sidebar","fw","cp","region","className"],"mappings":"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","file":"_WidgetsMixin.js","sourcesContent":["define([\r\n    'dojo/_base/declare',\r\n    'dojo/_base/array',\r\n    'dojo/_base/lang',\r\n\r\n    'put-selector',\r\n\r\n    'dijit/Menu',\r\n    'dijit/layout/ContentPane',\r\n\r\n    'gis/dijit/FloatingTitlePane',\r\n    'gis/dijit/FloatingWidgetDialog'\r\n\r\n], function (\r\n    declare,\r\n    array,\r\n    lang,\r\n\r\n    put,\r\n\r\n    Menu,\r\n    ContentPane,\r\n\r\n    FloatingTitlePane,\r\n    FloatingWidgetDialog\r\n) {\r\n\r\n    return declare(null, {\r\n\r\n        legendLayerInfos: [],\r\n        editorLayerInfos: [],\r\n        identifyLayerInfos: [],\r\n        layerControlLayerInfos: [],\r\n\r\n        widgets: {},\r\n        widgetTypes: ['titlePane', 'contentPane', 'floating', 'domNode', 'invisible', 'map', 'layer', 'layout', 'loading'],\r\n\r\n        createWidgets: function (widgetTypes) {\r\n            var widgets = [],\r\n                paneWidgets;\r\n\r\n            widgetTypes = widgetTypes || this.widgetTypes;\r\n            for (var key in this.config.widgets) {\r\n                if (this.config.widgets.hasOwnProperty(key)) {\r\n                    var widget = lang.clone(this.config.widgets[key]);\r\n                    widget.widgetKey = widget.widgetKey || widget.id || key;\r\n                    if (widget.include && (!this.widgets[widget.widgetKey]) && (array.indexOf(widgetTypes, widget.type) >= 0)) {\r\n                        widget.position = (typeof (widget.position) !== 'undefined') ? widget.position : 10000;\r\n                        if ((widget.type === 'titlePane' || widget.type === 'contentPane') && !widget.placeAt) {\r\n                            widget.placeAt = 'left';\r\n                        }\r\n                        widgets.push(widget);\r\n                        this.widgets[key] = true; // will be replaced by actual widget once created\r\n                    }\r\n                }\r\n            }\r\n\r\n            function getPaneWidgets (pane) {\r\n                paneWidgets = array.filter(widgets, function (paneWidget) {\r\n                    return (paneWidget.placeAt && paneWidget.placeAt === pane);\r\n                });\r\n                return paneWidgets;\r\n            }\r\n\r\n            for (var pane in this.panes) {\r\n                if (this.panes.hasOwnProperty(pane) && pane !== 'outer' && pane !== 'center') {\r\n                    paneWidgets = getPaneWidgets(pane);\r\n                    paneWidgets.sort(function (a, b) {\r\n                        return a.position - b.position;\r\n                    });\r\n                    if (paneWidgets.length > 0 && paneWidgets[0].position !== 0) {\r\n                        paneWidgets[0].position = 0;\r\n                    }\r\n                    array.forEach(paneWidgets, function (paneWidget, i) {\r\n                        this.widgetLoader(paneWidget, i);\r\n                    }, this);\r\n                }\r\n            }\r\n            paneWidgets = array.filter(widgets, function (paneWidget) {\r\n                return !paneWidget.placeAt;\r\n            });\r\n            paneWidgets.sort(function (a, b) {\r\n                return a.position - b.position;\r\n            });\r\n\r\n            array.forEach(paneWidgets, function (paneWidget, i) {\r\n                this.widgetLoader(paneWidget, i);\r\n            }, this);\r\n        },\r\n\r\n        widgetLoader: function (widgetConfig, position) {\r\n            var parentId, pnl;\r\n\r\n            var widgetTypes = this.widgetTypes;\r\n            // add any user-defined widget types\r\n            widgetTypes = widgetTypes.concat(this.config.widgetTypes || []);\r\n            // only proceed for valid widget types\r\n            if (array.indexOf(widgetTypes, widgetConfig.type) < 0) {\r\n                this.handleError({\r\n                    source: 'Controller',\r\n                    error: 'Widget type \"' + widgetConfig.type + '\" (' + widgetConfig.title + ') at position ' + position + ' is not supported.'\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (position) {\r\n                widgetConfig.position = position;\r\n            }\r\n\r\n            // build a titlePane or floating widget as the parent\r\n            if ((widgetConfig.type === 'titlePane' || widgetConfig.type === 'contentPane' || widgetConfig.type === 'floating')) {\r\n                parentId = widgetConfig.widgetKey + '_parent';\r\n                if (widgetConfig.type === 'titlePane') {\r\n                    pnl = this._createTitlePaneWidget(parentId, widgetConfig);\r\n                } else if (widgetConfig.type === 'contentPane') {\r\n                    pnl = this._createContentPaneWidget(parentId, widgetConfig);\r\n                } else if (widgetConfig.type === 'floating') {\r\n                    pnl = this._createFloatingWidget(parentId, widgetConfig);\r\n                }\r\n                widgetConfig.parentWidget = pnl;\r\n                this._showWidgetLoader(pnl);\r\n            }\r\n\r\n            // 2 ways to use require to accommodate widgets that may have an optional separate configuration file\r\n            if (typeof (widgetConfig.options) === 'string') {\r\n                require([widgetConfig.options, widgetConfig.path], lang.hitch(this, 'createWidget', widgetConfig));\r\n            } else {\r\n                require([widgetConfig.path], lang.hitch(this, 'createWidget', widgetConfig, widgetConfig.options));\r\n            }\r\n        },\r\n\r\n        createWidget: function (widgetConfig, options, WidgetClass) {\r\n            var key = widgetConfig.widgetKey;\r\n            if (!key) {\r\n                return;\r\n            }\r\n\r\n            // set any additional options\r\n            options = this._setWidgetOptions(widgetConfig, options);\r\n\r\n            // create the widget\r\n            var pnl = options.parentWidget;\r\n            var widgets = this.widgets;\r\n            if ((widgetConfig.type === 'titlePane' || widgetConfig.type === 'contentPane' || widgetConfig.type === 'floating')) {\r\n                widgets[key] = new WidgetClass(options, put('div')).placeAt(pnl.containerNode);\r\n            } else if (widgetConfig.type === 'domNode') {\r\n                widgets[key] = new WidgetClass(options, widgetConfig.srcNodeRef);\r\n            } else {\r\n                widgets[key] = new WidgetClass(options);\r\n            }\r\n            // start up the widget\r\n            if (widgets[key] && widgets[key].startup && !widgets[key]._started) {\r\n                widgets[key].startup();\r\n            }\r\n            this._hideWidgetLoader(pnl);\r\n        },\r\n\r\n        _setWidgetOptions: function (widgetConfig, options) {\r\n            if (widgetConfig.id) {\r\n                options.id = widgetConfig.id + '_widget';\r\n            }\r\n            options.parentWidget = widgetConfig.parentWidget;\r\n\r\n            //replace config map, layerInfos arrays, etc\r\n            if (options.map) {\r\n                options.map = this.map;\r\n            }\r\n            if (options.mapRightClickMenu) {\r\n                // create right-click menu\r\n                if (!this.mapRightClickMenu) {\r\n                    this.mapRightClickMenu = new Menu({\r\n                        targetNodeIds: [this.map.root],\r\n                        selector: '.esriMapLayers' // restrict to map only\r\n                    });\r\n                    this.mapRightClickMenu.startup();\r\n                }\r\n                options.mapRightClickMenu = this.mapRightClickMenu;\r\n            }\r\n            if (options.mapClickMode) {\r\n                options.mapClickMode = this.mapClickMode.current;\r\n            }\r\n            if (options.legendLayerInfos) {\r\n                options.layerInfos = this.legendLayerInfos;\r\n            }\r\n            if (options.layerControlLayerInfos) {\r\n                options.layerInfos = this.layerControlLayerInfos;\r\n            }\r\n            if (options.editorLayerInfos) {\r\n                options.layerInfos = this.editorLayerInfos;\r\n            }\r\n            if (options.identifyLayerInfos) {\r\n                options.layerInfos = this.identifyLayerInfos;\r\n            }\r\n            return options;\r\n        },\r\n\r\n        _showWidgetLoader: function (pnl) {\r\n            if (pnl && pnl.containerNode) {\r\n                pnl.loadingNode = put(pnl.containerNode, 'div.widgetLoader i.fa.fa-spinner.fa-pulse.fa-fw').parentNode;\r\n            }\r\n        },\r\n\r\n        _hideWidgetLoader: function (pnl) {\r\n            if (pnl && pnl.loadingNode) {\r\n                require(['dojo/domReady!'], function () {\r\n                    put(pnl.loadingNode, '!');\r\n                });\r\n            }\r\n        },\r\n\r\n        _createTitlePaneWidget: function (parentId, widgetConfig) {\r\n            var tp,\r\n                options = lang.mixin({\r\n                    title: widgetConfig.title || 'Widget',\r\n                    open: widgetConfig.open || false,\r\n                    canFloat: widgetConfig.canFloat || false,\r\n                    resizable: widgetConfig.resizable || false\r\n                }, widgetConfig.paneOptions || {});\r\n            if (parentId) {\r\n                options.id = parentId;\r\n            }\r\n            var placeAt = widgetConfig.placeAt;\r\n            if (typeof (placeAt) === 'string') {\r\n                placeAt = this.panes[placeAt];\r\n            }\r\n            if (!placeAt) {\r\n                placeAt = this.panes.left;\r\n            }\r\n            if (placeAt) {\r\n                options.sidebar = placeAt;\r\n                tp = new FloatingTitlePane(options).placeAt(placeAt, widgetConfig.position);\r\n                tp.startup();\r\n            }\r\n            return tp;\r\n        },\r\n\r\n        _createFloatingWidget: function (parentId, widgetConfig) {\r\n            var options = lang.mixin({\r\n                title: widgetConfig.title\r\n            }, widgetConfig.paneOptions || {});\r\n            if (parentId) {\r\n                options.id = parentId;\r\n            }\r\n            var fw = new FloatingWidgetDialog(options);\r\n            fw.startup();\r\n            return fw;\r\n        },\r\n\r\n        _createContentPaneWidget: function (parentId, widgetConfig) {\r\n            var cp,\r\n                options = lang.mixin({\r\n                    title: widgetConfig.title,\r\n                    region: widgetConfig.region || 'center'\r\n                }, widgetConfig.paneOptions || {});\r\n            if (widgetConfig.className) {\r\n                options.className = widgetConfig.className;\r\n            }\r\n            if (parentId) {\r\n                options.id = parentId;\r\n            }\r\n            var placeAt = widgetConfig.placeAt;\r\n            if (!placeAt) {\r\n                placeAt = this.panes.left;\r\n            } else if (typeof (placeAt) === 'string') {\r\n                placeAt = this.panes[placeAt];\r\n            }\r\n            if (placeAt) {\r\n                cp = new ContentPane(options).placeAt(placeAt);\r\n                cp.startup();\r\n            }\r\n            return cp;\r\n        }\r\n\r\n    });\r\n});\r\n"]}